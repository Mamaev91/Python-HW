# 1. Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами.
# В результирующем списке не должно быть дубликатов.

# list_1 = [7, 2, 1, 4, 6, 7, 3, 2, 4]
# list_2 = []
#
# for item in list_1:
#     if list_1.count(item) > 1:
#         list_2.append(item)
# print(list_2)
#
# list_3 = list(set(list_2))
#
# print(list_3)

# 2. В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
# Не учитывать знаки препинания и регистр символов.
# За основу возьмите любую статью из википедии или из документации к языку.

text = '''
Python — высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью,
 ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ. 
 Язык является полностью объектно-ориентированным в том плане, что всё является объектами. 
 Необычной особенностью языка является выделение блоков кода пробельными отступами.
 Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации. 
 Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов. 
 Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, 
 написанным на компилируемых языках, таких как C или C++.
 Python является мультипарадигменным языком программирования, поддерживающим императивное, процедурное, структурное, объектно-ориентированное программирование,
 метапрограммирование и функциональное программирование. 
 Задачи обобщённого программирования решаются за счёт динамической типизации. 
 Аспектно-ориентированное программирование частично поддерживается через декораторы, более полноценная поддержка обеспечивается дополнительными фреймворками. 
 Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений. 
 Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, 
 механизм обработки исключений, поддержка многопоточных вычислений с глобальной блокировкой интерпретатора, высокоуровневые структуры данных. 
 Поддерживается разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты.
 Эталонной реализацией Python является интерпретатор CPython, который поддерживает большинство активно используемых платформ
  и являющийся стандартом де-факто языка. Он распространяется под свободной лицензией Python Software Foundation License,
  позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. 
  CPython компилирует исходные тексты в высокоуровневый байт-код, который исполняется в стековой виртуальной машине. 
  К другим трём основным реализациям языка относятся Jython (для JVM), IronPython (для CLR/.NET) и PyPy. 
  PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива CPython с целью повышения скорости исполнения программ,
  в том числе за счёт использования JIT-компиляции. Поддержка версии Python 2 закончилась в 2020 году. 
  На текущий момент активно развивается версия языка Python 3. 
  Разработка языка ведётся через предложения по расширению языка PEP (англ. Python Enhancement Proposal), 
  в которых описываются нововведения, делаются корректировки согласно обратной связи от сообщества и документируются итоговые решения.'''

lst_no = ['.', ',', ':', '!', '"', "'", '[', ']', '-', '—', '(', ')', '?', '_', '`'  ]   # и т.д.
lst = []

for word in text.lower().split():
    if word not in lst_no:
        _word = word
        if word[-1] in lst_no:
            _word = _word[:-1]
        if word[0] in lst_no:
            _word = _word[1:]
        lst.append(_word)

_dict = dict()
for word in lst:
    _dict[word] = _dict.get(word, 0) + 1

# сортируем словарь посредством формирования списка (значение, ключ)
_list = []
for key, value in _dict.items():
    _list.append((value, key))
    _list.sort(reverse=True)

# самое частое слово в этом тексте
print(f'самое частое слово в этом тексте -> `{_list[0][1]}`, использовалось `{_list[0][0]}` раз.')
# печатаем первые 10 самых используемых слов
print('Первые 10 самых используемых слов:')
for freq, word in _list[0:10]:
    print(f'{word:>10} -> {freq:>3}')

print('\nили так: (с условием, что длина слова > 4- букв) \n')
_dict = {(i, lst.count(i)) for i in lst}
_list = []

for word, kol in _dict:
    _list.append((kol, word))
    _list.sort(reverse=True)

for freq, word in _list[0:20]:
    if len(word) > 4:
        print('{0:10} {1}'.format(word, freq))



